{"version":3,"sources":["useFetchDecks.js","components/Loading.js","components/Decks.js","components/Error.js","useFetch.js","components/NavButtons.js","components/Question.js","App.js","reportWebVitals.js","index.js"],"names":["url","useFetchDecks","useState","loading","setLoading","data","setData","fetchData","a","fetch","resp","json","categories","Set","feed","entry","map","gsx$deck","$t","useEffect","Loading","Decks","className","index","to","style","textTransform","Error","useFetch","deck","filterData","filter","NavButtons","href","target","Question","useParams","setIndex","isShown","setIsShown","checkNum","num","length","answer","gsx$answer","question","gsx$question","onClick","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9097c514.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst gsheetID = '14WygMRnGA3QWRDYvPOGTWGWNH68cUyOUE2VYumS0NUo';\r\nconst gsheetNum = '1';\r\nconst url = `https://spreadsheets.google.com/feeds/list/${gsheetID}/${gsheetNum}/public/values?alt=json`;\r\n\r\nconst useFetchDecks = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState();\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n\r\n    const resp = await fetch(url);\r\n    const data = await resp.json();\r\n\r\n    const categories = [\r\n      ...new Set(data.feed.entry.map((data) => data.gsx$deck.$t)),\r\n    ];\r\n    setData(categories);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return { loading, data };\r\n};\r\n\r\nexport default useFetchDecks;\r\n","import React from 'react';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <main>\r\n      <h1>Loading ...</h1>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport useFetchDecks from '../useFetchDecks';\r\nimport Loading from './Loading';\r\n\r\nconst Decks = () => {\r\n  const { loading, data } = useFetchDecks();\r\n\r\n  if (loading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <h1>List of Decks</h1>\r\n      <div className='underline'></div>\r\n      <section className='decks'>\r\n        {data &&\r\n          data.map((data, index) => {\r\n            return (\r\n              <div key={index}>\r\n                <Link\r\n                  to={`/review/${data}`}\r\n                  style={{ textTransform: 'capitalize' }}>\r\n                  {data}\r\n                </Link>\r\n              </div>\r\n            );\r\n          })}\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Decks;\r\n","import React from 'react';\r\n\r\nconst Error = () => {\r\n  return (\r\n    <main>\r\n      <h1>Error 404: Page not found.</h1>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst gsheetID = '14WygMRnGA3QWRDYvPOGTWGWNH68cUyOUE2VYumS0NUo';\r\nconst gsheetNum = '1';\r\nconst url = `https://spreadsheets.google.com/feeds/list/${gsheetID}/${gsheetNum}/public/values?alt=json`;\r\n\r\nconst useFetch = (deck) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState();\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    const resp = await fetch(url);\r\n    const data = await resp.json();\r\n\r\n    const filterData = data.feed.entry.filter(\r\n      (data) => data.gsx$deck.$t === deck\r\n    );\r\n    setData(filterData);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { loading, data };\r\n};\r\n\r\nexport default useFetch;\r\n","import React from 'react';\r\nimport { FaHome, FaPlus, FaTasks } from 'react-icons/fa';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavButtons = () => {\r\n  return (\r\n    <nav>\r\n      <button>\r\n        <Link to='/'>\r\n          <FaHome />\r\n        </Link>\r\n      </button>\r\n      <button>\r\n        <a href='https://forms.gle/TAqSZwmMrfwgqsQU7' target='_blank'>\r\n          <FaPlus />\r\n        </a>\r\n      </button>\r\n      <button>\r\n        <a\r\n          href='https://docs.google.com/spreadsheets/d/14WygMRnGA3QWRDYvPOGTWGWNH68cUyOUE2VYumS0NUo/edit?usp=sharing'\r\n          target='_blank'>\r\n          <FaTasks />\r\n        </a>\r\n      </button>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavButtons;\r\n","import React, { useState } from 'react';\r\nimport useFetch from '../useFetch';\r\nimport { FaAngleLeft, FaAngleRight } from 'react-icons/fa';\r\nimport Loading from './Loading';\r\nimport { useParams } from 'react-router-dom';\r\nimport NavButtons from './NavButtons';\r\n\r\nconst Question = () => {\r\n  const { deck } = useParams();\r\n  const { loading, data } = useFetch(deck);\r\n  const [index, setIndex] = useState(0);\r\n  const [isShown, setIsShown] = useState(false);\r\n\r\n  // check the current index and make sure it is within limits\r\n  const checkNum = (num) => {\r\n    if (num > data.length - 1) {\r\n      return 0;\r\n    }\r\n    if (num < 0) {\r\n      return data.length - 1;\r\n    }\r\n    return num;\r\n  };\r\n\r\n  // moves to next question, pass to a function to check index\r\n  const handleNext = () => {\r\n    setIsShown(false);\r\n    setIndex((index) => {\r\n      let newIndex = index + 1;\r\n      return checkNum(newIndex);\r\n    });\r\n  };\r\n\r\n  // moves to previous question, pass to a function to check index\r\n  const handlePrev = () => {\r\n    setIsShown(false);\r\n    setIndex((index) => {\r\n      let newIndex = index - 1;\r\n      return checkNum(newIndex);\r\n    });\r\n  };\r\n\r\n  if (loading) {\r\n    return <Loading />;\r\n  }\r\n  if (data) {\r\n    var { gsx$answer: answer, gsx$question: question } = data[index];\r\n  }\r\n\r\n  return (\r\n    <section className='cards'>\r\n      {data && (\r\n        <article className='card'>\r\n          <div className='question'>\r\n            <h2>Question:</h2>\r\n            <h3>{question.$t}</h3>\r\n          </div>\r\n          {isShown && (\r\n            <div className='answer'>\r\n              <h2>Answer:</h2>\r\n              <h3>{answer.$t}</h3>\r\n              <div className='underline'></div>\r\n            </div>\r\n          )}\r\n\r\n          <div className='buttons'>\r\n            <button className='btn' onClick={handlePrev}>\r\n              <FaAngleLeft />\r\n            </button>\r\n            <button\r\n              className='btn show-answer'\r\n              onClick={() => setIsShown(!isShown)}>\r\n              {isShown ? 'Hide' : 'Show'} Answer\r\n            </button>\r\n            <button className='btn' onClick={handleNext}>\r\n              <FaAngleRight />\r\n            </button>\r\n          </div>\r\n        </article>\r\n      )}\r\n\r\n      <NavButtons />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Decks from './components/Decks';\nimport Error from './components/Error';\nimport Question from './components/Question';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path='/'>\n          <Decks />\n        </Route>\n        <Route path='/review/:deck'>\n          <main>\n            <Question />\n          </main>\n        </Route>\n        <Route path='*'>\n          <Error />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}